from __future__ import annotations
import typing
from . import CanFlags

__all__ = ["CanDevice", "CanDeviceArguments", "CanFlags", "CanFrame"]

class CanDevice:
    @staticmethod
    def create(arg0: str, arg1: CanDeviceArguments) -> CanDevice: ...
    def close(self) -> int: ...
    def configuration(self) -> CanDeviceArguments: ...
    def open(self) -> int: ...
    @typing.overload
    def send(self, arg0: CanFrame) -> int: ...
    @typing.overload
    def send(self, arg0: list[CanFrame]) -> list[int]: ...
    def vendor_name(self) -> str: ...

class CanDeviceArguments:
    def __init__(self, arg0: str, arg1: typing.Callable[[CanFrame], None]) -> None: ...
    def set_receiver(self, arg0: typing.Callable[[CanFrame], None]) -> None: ...
    @property
    def vendor_config(self) -> str: ...

class CanFrame:
    @typing.overload
    def __init__(self, id: int, requested_length: int, flags: int) -> None: ...
    @typing.overload
    def __init__(self, id: int, requested_length: int) -> None: ...
    @typing.overload
    def __init__(self, id: int) -> None: ...
    @typing.overload
    def __init__(self, id: int, message: list[str]) -> None: ...
    @typing.overload
    def __init__(self, id: int, message: list[str], flags: int) -> None: ...
    def flags(self) -> int: ...
    def id(self) -> int: ...
    def is_error(self) -> bool: ...
    def is_extended_id(self) -> bool: ...
    def is_remote_request(self) -> bool: ...
    def is_standard_id(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def length(self) -> int: ...
    def message(self) -> list[str]: ...
