from __future__ import annotations
import typing
from . import CanDeviceError
from . import CanFlags

__all__ = [
    "CanDevice",
    "CanDeviceArguments",
    "CanDeviceConfiguration",
    "CanDeviceError",
    "CanDiagnostics",
    "CanFlags",
    "CanFrame",
]

class CanDevice:
    @staticmethod
    def create(arg0: str, arg1: CanDeviceArguments) -> CanDevice: ...
    def args(self) -> CanDeviceArguments: ...
    def close(self) -> int: ...
    def diagnostics(self) -> CanDiagnostics: ...
    def open(self) -> int: ...
    @typing.overload
    def send(self, arg0: CanFrame) -> int: ...
    @typing.overload
    def send(self, arg0: list[CanFrame]) -> list[int]: ...

class CanDeviceArguments:
    def __init__(
        self,
        config: CanDeviceConfiguration,
        receiver: typing.Callable[[CanFrame], None],
    ) -> None: ...
    @property
    def config(self) -> CanDeviceConfiguration: ...

class CanDeviceConfiguration:
    bitrate: int | None
    bus_name: str | None
    bus_number: int | None
    enable_termination: bool | None
    host: str | None
    sent_acknowledgement: int | None
    timeout: int | None
    def __init__(self) -> None: ...
    def __str__(self) -> str: ...

class CanDiagnostics:
    def __init__(self) -> None: ...
    @property
    def arbitration_lost(self) -> int | None: ...
    @property
    def bitrate(self) -> int | None: ...
    @property
    def bus_error(self) -> int | None: ...
    @property
    def bus_off(self) -> int | None: ...
    @property
    def connected_clients_addresses(self) -> list[str] | None: ...
    @property
    def connected_clients_ports(self) -> list[int] | None: ...
    @property
    def connected_clients_timestamps(self) -> list[str] | None: ...
    @property
    def error_passive(self) -> int | None: ...
    @property
    def error_warning(self) -> int | None: ...
    @property
    def handle(self) -> int | None: ...
    @property
    def log_entries(self) -> list[str] | None: ...
    @property
    def mode(self) -> str | None: ...
    @property
    def name(self) -> str | None: ...
    @property
    def number_connected_clients(self) -> int | None: ...
    @property
    def restarts(self) -> int | None: ...
    @property
    def rx(self) -> int | None: ...
    @property
    def rx_drop(self) -> int | None: ...
    @property
    def rx_error(self) -> int | None: ...
    @property
    def state(self) -> str | None: ...
    @property
    def tcp_rx(self) -> int | None: ...
    @property
    def tcp_tx(self) -> int | None: ...
    @property
    def temperature(self) -> float | None: ...
    @property
    def tx(self) -> int | None: ...
    @property
    def tx_drop(self) -> int | None: ...
    @property
    def tx_error(self) -> int | None: ...
    @property
    def tx_timeout(self) -> int | None: ...
    @property
    def uptime(self) -> int | None: ...

class CanFrame:
    @typing.overload
    def __init__(self, id: int, requested_length: int, flags: int) -> None: ...
    @typing.overload
    def __init__(self, id: int, requested_length: int) -> None: ...
    @typing.overload
    def __init__(self, id: int) -> None: ...
    @typing.overload
    def __init__(self, id: int, message: list[str]) -> None: ...
    @typing.overload
    def __init__(self, id: int, message: list[str], flags: int) -> None: ...
    def __str__(self) -> str: ...
    def flags(self) -> int: ...
    def id(self) -> int: ...
    def is_error(self) -> bool: ...
    def is_extended_id(self) -> bool: ...
    def is_remote_request(self) -> bool: ...
    def is_standard_id(self) -> bool: ...
    def length(self) -> int: ...
    def message(self) -> list[str]: ...
