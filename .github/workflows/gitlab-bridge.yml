name: Gitlab Pipeline Integration

on: push

jobs:
  Gitlab_Trigger_Pipeline:
    runs-on: cern:gitlab-ci
    container: ghcr.io/miguensone/github-gitlab-sync:latest
    env:
      GITLAB_URL: ${{ vars.GITLAB_URL }}
      PROJECT_ID: ${{ vars.PROJECT_ID }}
      GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
    outputs:
      job_matrix: ${{ steps.set-matrix.outputs.job_matrix }}
    steps:
      - name: Trigger Gitlab Pipeline
        run: |
          echo $GITLAB_URL
          python /opt/bridge/sync-repository.py
          echo "COMMIT_REF=${{ github.sha }}" >> $GITHUB_ENV
          PIPELINE_ID=$(python /opt/bridge/trigger-pipeline.py)
          echo "PIPELINE_ID=${PIPELINE_ID}" >> $GITHUB_ENV
          python /opt/bridge/retrieve-jobs.py > list_of_jobs.txt
          job_matrix=$(cat list_of_jobs.txt | awk -F: '{ print $1 }' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "::set-output name=job_matrix::$job_matrix"

  Gitlab_Pipeline_Jobs:
    needs: Gitlab_Trigger_Pipeline
    runs-on: cern:gitlab-ci
    container: ghcr.io/miguensone/github-gitlab-sync:latest
    env:
      GITLAB_URL: ${{ vars.GITLAB_URL }}
      PROJECT_ID: ${{ vars.PROJECT_ID }}
      GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
    strategy:
      matrix:
        run_id: ${{ fromJson(needs.generate-jobs.outputs.job_matrix) }}
    steps:
      - name: Set RUN_ID and JOB_NAME
        run: |
          JOB_ID=${{ matrix.run_id }}
          python /opt/bridge/retrieve-job.py
          echo "JOB_NAME=$(echo Hello_$RANDOM" >> $GITHUB_ENV

  Gitlab_Pipeline_Final_Status:
    needs: [Gitlab_Pipeline_Jobs]
    runs-on: cern:gitlab-ci
    container: ghcr.io/miguensone/github-gitlab-sync:latest
    env:
      GITLAB_URL: ${{ vars.GITLAB_URL }}
      PROJECT_ID: ${{ vars.PROJECT_ID }}
      GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
    steps:
      - name: Final Gitlab Pipeline Status
        run: |
          python /opt/bridge/wait-pipeline.py
